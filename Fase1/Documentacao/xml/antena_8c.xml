<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="antena_8c" kind="file" language="C++">
    <compoundname>antena.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">locale.h</includes>
    <includes refid="antena_8h" local="yes">antena.h</includes>
    <incdepgraph>
      <node id="1">
        <label>antena.c</label>
        <link refid="antena_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>antena.h</label>
        <link refid="antena_8h"/>
      </node>
      <node id="4">
        <label>locale.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="antena_8c_1a00a386a23b9f361d1f4c1cb0e735ca5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_antena" kindref="compound">Antena</ref> *</type>
        <definition>Antena * criarAntena</definition>
        <argsstring>(char freq, int linha, int coluna)</argsstring>
        <name>criarAntena</name>
        <param>
          <type>char</type>
          <declname>freq</declname>
        </param>
        <param>
          <type>int</type>
          <declname>linha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>coluna</declname>
        </param>
        <briefdescription>
<para>Cria uma nova antena com os dados fornecidos. </para>
        </briefdescription>
        <detaileddescription>
<para>Função que cria uma nova antena.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>freq</parametername>
</parameternamelist>
<parameterdescription>
<para>Char que representa a frequência/tipo de antena </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linha</parametername>
</parameternamelist>
<parameterdescription>
<para>Linha da matriz onde a antena será colocada </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coluna</parametername>
</parameternamelist>
<parameterdescription>
<para>Coluna da matriz onde a antena será colocada </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Antena* Apontador para a nova antena criada </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="antena.c" line="26" column="8" bodyfile="antena.c" bodystart="26" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="antena_8c_1acc0269270f879978a2b329a200244697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void inserirAntena</definition>
        <argsstring>(Antena **aux, char freq, int linha, int coluna)</argsstring>
        <name>inserirAntena</name>
        <param>
          <type><ref refid="struct_antena" kindref="compound">Antena</ref> **</type>
          <declname>aux</declname>
        </param>
        <param>
          <type>char</type>
          <declname>freq</declname>
        </param>
        <param>
          <type>int</type>
          <declname>linha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>coluna</declname>
        </param>
        <briefdescription>
<para>Insere uma nova antena no final da lista ligada de antenas. </para>
        </briefdescription>
        <detaileddescription>
<para>Função que insere uma nova antena na lista.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aux</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o apontador da lista de antenas </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>freq</parametername>
</parameternamelist>
<parameterdescription>
<para>Char que representa a frequência/tipo de antena </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linha</parametername>
</parameternamelist>
<parameterdescription>
<para>Linha onde será inserida </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coluna</parametername>
</parameternamelist>
<parameterdescription>
<para>Coluna onde será inserida </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="antena.c" line="48" column="6" bodyfile="antena.c" bodystart="48" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="antena_8c_1ae669c21caa03887ddee7c957a10fbf40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void removerAntena</definition>
        <argsstring>(Antena **aux, int linha, int coluna)</argsstring>
        <name>removerAntena</name>
        <param>
          <type><ref refid="struct_antena" kindref="compound">Antena</ref> **</type>
          <declname>aux</declname>
        </param>
        <param>
          <type>int</type>
          <declname>linha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>coluna</declname>
        </param>
        <briefdescription>
<para>Remove uma antena localizada numa posição específica da matriz. </para>
        </briefdescription>
        <detaileddescription>
<para>Função que remove uma antena localizada numa posição especifica da matriz.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aux</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para o apontador da lista de antenas </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linha</parametername>
</parameternamelist>
<parameterdescription>
<para>Linha da antena a remover </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coluna</parametername>
</parameternamelist>
<parameterdescription>
<para>Coluna da antena a remover </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="antena.c" line="69" column="6" bodyfile="antena.c" bodystart="69" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="antena_8c_1a95eef017973172f510d032bc882e2053" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void auxrAntenas</definition>
        <argsstring>(Antena *aux)</argsstring>
        <name>auxrAntenas</name>
        <param>
          <type><ref refid="struct_antena" kindref="compound">Antena</ref> *</type>
          <declname>aux</declname>
        </param>
        <briefdescription>
<para>Lista todas as antenas presentes na lista ligada. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aux</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para a lista de antenas </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="antena.c" line="90" column="6" bodyfile="antena.c" bodystart="90" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="antena_8c_1a66ea723ccc8f6e107b0c215c4b2dd28f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libertarAntenas</definition>
        <argsstring>(Antena *aux)</argsstring>
        <name>libertarAntenas</name>
        <param>
          <type><ref refid="struct_antena" kindref="compound">Antena</ref> *</type>
          <declname>aux</declname>
        </param>
        <briefdescription>
<para>Liberta a memória alocada para a lista de antenas. </para>
        </briefdescription>
        <detaileddescription>
<para>Liberta a memória ocupada por todas as antenas da lista.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aux</parametername>
</parameternamelist>
<parameterdescription>
<para>Apontador para a lista de antenas </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="antena.c" line="106" column="6" bodyfile="antena.c" bodystart="106" bodyend="113"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Daniel Vilaça (<ulink url="mailto:a16939@alunos.ipca.pt">a16939@alunos.ipca.pt</ulink>) </para>
</simplesect>
<simplesect kind="version"><para>1.0 </para>
</simplesect>
<simplesect kind="date"><para>2025-03-30</para>
</simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2025 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;locale.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="antena_8h" kindref="compound">antena.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="antena_8c_1a00a386a23b9f361d1f4c1cb0e735ca5d" refkind="member"><highlight class="normal"><ref refid="struct_antena" kindref="compound">Antena</ref><sp/>*<ref refid="antena_8c_1a00a386a23b9f361d1f4c1cb0e735ca5d" kindref="member">criarAntena</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>freq,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linha,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>coluna)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_antena" kindref="compound">Antena</ref><sp/>*nova<sp/>=<sp/>(<ref refid="struct_antena" kindref="compound">Antena</ref><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_antena" kindref="compound">Antena</ref>));</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!nova)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Erro<sp/>ao<sp/>alocar<sp/>memória&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>nova-&gt;freq<sp/>=<sp/>freq;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>nova-&gt;linha<sp/>=<sp/>linha;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>nova-&gt;coluna<sp/>=<sp/>coluna;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>nova-&gt;next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nova;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="antena_8c_1acc0269270f879978a2b329a200244697" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="antena_8c_1acc0269270f879978a2b329a200244697" kindref="member">inserirAntena</ref>(<ref refid="struct_antena" kindref="compound">Antena</ref><sp/>**aux,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>freq,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linha,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>coluna)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_antena" kindref="compound">Antena</ref><sp/>*nova<sp/>=<sp/><ref refid="antena_8c_1a00a386a23b9f361d1f4c1cb0e735ca5d" kindref="member">criarAntena</ref>(freq,<sp/>linha,<sp/>coluna);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>nova-&gt;next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*aux<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*aux<sp/>=<sp/>nova;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_antena" kindref="compound">Antena</ref><sp/>*atual<sp/>=<sp/>*aux;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(atual-&gt;next<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atual<sp/>=<sp/>atual-&gt;next;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atual-&gt;next<sp/>=<sp/>nova;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="antena_8c_1ae669c21caa03887ddee7c957a10fbf40" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="antena_8c_1ae669c21caa03887ddee7c957a10fbf40" kindref="member">removerAntena</ref>(<ref refid="struct_antena" kindref="compound">Antena</ref><sp/>**aux,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linha,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>coluna)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_antena" kindref="compound">Antena</ref><sp/>*atual<sp/>=<sp/>*aux,<sp/>*anterior<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(atual)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(atual-&gt;linha<sp/>==<sp/>linha<sp/>&amp;&amp;<sp/>atual-&gt;coluna<sp/>==<sp/>coluna)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(anterior)<sp/>anterior-&gt;next<sp/>=<sp/>atual-&gt;next;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>*aux<sp/>=<sp/>atual-&gt;next;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(atual);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anterior<sp/>=<sp/>atual;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atual<sp/>=<sp/>atual-&gt;next;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Antena<sp/>em<sp/>(%d,<sp/>%d)<sp/>não<sp/>encontrada.\n&quot;</highlight><highlight class="normal">,<sp/>linha<sp/>+<sp/>1,<sp/>coluna<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="antena_8c_1a95eef017973172f510d032bc882e2053" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="antena_8c_1a95eef017973172f510d032bc882e2053" kindref="member">auxrAntenas</ref>(<ref refid="struct_antena" kindref="compound">Antena</ref><sp/>*aux)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>setlocale(LC_ALL,<sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n%-12s<sp/>%-10s<sp/>%-10s\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Frequencia&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Linha&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Coluna&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%-12s<sp/>%-10s<sp/>%-10s\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-----------&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-----&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;------&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(aux)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%-12c<sp/>%-10d<sp/>%-10d\n&quot;</highlight><highlight class="normal">,<sp/>aux-&gt;freq,<sp/>aux-&gt;linha<sp/>+<sp/>1,<sp/>aux-&gt;coluna<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;next;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="antena_8c_1a66ea723ccc8f6e107b0c215c4b2dd28f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="antena_8c_1a66ea723ccc8f6e107b0c215c4b2dd28f" kindref="member">libertarAntenas</ref>(<ref refid="struct_antena" kindref="compound">Antena</ref><sp/>*aux)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_antena" kindref="compound">Antena</ref><sp/>*temp;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(aux)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>aux;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux<sp/>=<sp/>aux-&gt;next;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(temp);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="antena.c"/>
  </compounddef>
</doxygen>
